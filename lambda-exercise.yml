
Parameters:
  S3BucketName:
    Type: String
    
Resources:
  ExerciseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.exercise_lambda
      Role: !GetAtt ExerciseLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import cfnresponse

          ssm = boto3.client('ssm')
          s3 = boto3.client('s3')

          def exercise_lambda(event, context):
              response = ssm.get_parameter(Name='UserName')
              user = response['Parameter']['Value']

              bucket = os.environ['S3_BUCKET_NAME']
              s3.put_object(Bucket=bucket, Key='exercise-lambda.txt', Body=user)

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "Done")

      Runtime: python3.12
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
    
    DeletionPolicy: Delete

  CustomResource:
    Type: Custom::LambdaInvoke
    Properties:
      ServiceToken: !GetAtt ExerciseLambda.Arn
      BucketName: !Ref S3BucketName

  ExerciseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - s3:PutObject
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
